server_names_hash_bucket_size 64;

server {
        listen 80;
        server_name  {{ domain | default(ansible_host) }};
        server_tokens off;
        rewrite ^(.*)$ https://{{ domain | default(ansible_host) }}:443$1 permanent;
}
 
server {
        listen 443 ssl http2;
        server_name {{ domain | default(ansible_host) }};
        access_log  /var/log/nginx/{{ domain | default(ansible_host) }}-access.log    combined;
 
        error_log  /var/log/nginx/{{ domain | default(ansible_host) }}-error.log;

        ssl_certificate /etc/nginx/ssl/wg_nginx.pem;
        ssl_certificate_key /etc/nginx/ssl/wg_nginx.key;

        ssl_protocols               TLSv1.2 TLSv1.3;
        ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS";
        ssl_prefer_server_ciphers   on;
        ssl_session_timeout         10m;
        ssl_session_cache           shared:SSL:10m;
        ssl_session_tickets         off;

        server_tokens off;

        error_page 500 502 503 504 /error.html;
        proxy_intercept_errors on;

        proxy_connect_timeout 1200;
        proxy_send_timeout 1200;
        proxy_read_timeout 1200;
        send_timeout 1200;
        keepalive_timeout 600;

        location / {
                proxy_pass http://wg-easy:51821/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                proxy_set_header  Host              $http_host;   # required for docker client's sake
                proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
                proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
        }  
}
